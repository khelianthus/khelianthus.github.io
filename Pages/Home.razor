@page "/"
@using PetScanner.Models.DTO
@using PetScanner.Services
@inject IJSRuntime jsRuntime
@inject LocalStorageService localStorageService

<PageTitle></PageTitle>


<div class="d-flex justify-content-end">
    <button class="button" @onclick="FetchData">
        <div class="button-content">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-bar-down" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M1 3.5a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13a.5.5 0 0 1-.5-.5M8 6a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 0 1 .708-.708L7.5 12.293V6.5A.5.5 0 0 1 8 6" />
            </svg>
            Get latest data
        </div>
      </button>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

else
{
    @if (timeStamps == null)
    {
        <p>
            Nothing has been scanned.
        </p>
    }

    <p>Scans of today: @timeStamps.Count()</p>

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Time</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in timeStamps)
            {
                <tr>
                    <td>?</td>
                    <td>@item.Time</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<TimeResponse>? timeStamps;
    private FetchFromArduino fetchFromArduino;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        await FetchData();

        isLoading = false;

    }

    public async Task FetchData()
    {
        var httpClient = new HttpClient();

        var fetchFromArduino = new FetchFromArduino(httpClient, jsRuntime, localStorageService);

        try
        {
            isLoading = true;

            timeStamps = await fetchFromArduino.GetTimeOfScan();

            isLoading = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            isLoading = false;
        }
    }
}
